examples:
- name: EXAMPLE 1
  preCode: ''
  code: $lookup = @{
  postCode: device_type='dcim/device-types'     device_role='dcim/device-roles'     site='organization/sites'     status='dcim/_choices' } $device = @{     name = 'example'     serial = 'aka123457'     device_type = 'dl380-g9'     device_role = 'oracle'     site = 'chicago'     status = 'active' } Set-nbObject -resource dcim/devices -id 22 -lookup $lookup @device
- name: EXAMPLE 2
  preCode: ''
  code: Set-nbObject -resource dcim/devices -id 22 -name example2 -serial madeup -device_type dl380-gen8 -site chicago -lookup device_type,site
  postCode: ''
inputs: []
links: []
module:
  name: powerbox
name: New-nbObject
notes: ''
optionalParameters:
- name: CustomProperties
  aliases: []
  defaultValue: None
  description: List of custom properties
  parameterValueGroup: []
  pipelineInput: False
  position: 2
  type: String[]
- name: Lookup
  aliases: []
  defaultValue: None
  description: List of properties to lookup
  parameterValueGroup: []
  pipelineInput: False
  position: 3
  type: Hashtable
- name: Properties
  aliases: []
  defaultValue: None
  description: you can specify properties as arguments to this command
  parameterValueGroup: []
  pipelineInput: False
  position: 4
  type: Object
outputs: []
requiredParameters:
- name: Resource
  aliases:
  - type
  - object
  defaultValue: None
  description: object/resource type
  parameterValueGroup: []
  pipelineInput: False
  position: 1
  type: String
remarks: This should handle mapping a simple hashtable of values and looking up any references.
summary: Sets properties on a object in Netbox
syntaxes:
- parameters:
  - Resource
  - CustomProperties
  - Lookup
  - Properties
